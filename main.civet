//@ts-nocheck
"civet autoLet"


Tag := class
  @()
    @initVnode()
    @render = null
    @dom = null
    @initParams = ->
    @parent = null

  initVnode()
    @ ||>
      .vnode =
        tagName:"div"
        attrs:{}
        params:{}
        children:[]
        
  view(fn)
    @render = ->
      @initParams()
      fn(@)
    @
  inject(fn)
    oldRender = @render
    @render = ->
      oldRender.call @
      fn(@)
    @
  param(paramFn)
    @initParams = ->
      @vnode.params = {
        ...@vnode.params
        ...paramFn()
      }
    @
  to(fn)
    fn(@)
    @
  tag(name)
    @ ||>
      .vnode.tagName = name
  setParent(tag)
    @parent = tag
    @
  attr(attrObj)
    if attrObj.style
      throw new Error "please use style replace attr"
    @ ||>
      .vnode.attrs = {
        ...@vnode.attrs
        ...attrObj
      }
    @
  style(styleObj)
    @ ||>
      .vnode.attrs.style = {
        ...@vnode.attrs.style
        ...styleObj
      }
  clone()
    clone = new Tag()
    clone.initParams = @initParams
    clone.render = @render
    clone.parent = @parent
    clone.vnode = JSON.parse JSON.stringify @vnode
    clone


  child(tag)
    switch typeof tag
      "string"
        @vnode.children.push new Tag().view .text(tag).setParent(@)
      else
        if tag not instanceof Tag
          console.error tag
          throw new Error "tag not instance of Tag"
        @vnode.children.push tag.setParent(@)
  text(str)
    @vnode.children = str
    @
  children(children)
    if typeof children is "string"
      @child children
    else
      for child of children
        @child child
    @
  draw()
    switch typeof @vnode.children
      "string"
        @dom ?= document.createTextNode ""
        if @dom
          parent = @dom.parentNode
          if parent
            parent.removeChild @dom
            @dom = document.createTextNode ""
            @dom.parentNode.appendChild @dom
            
        if @vnode.attrs.oncreate
          @vnode.attrs.oncreate @dom

        @dom.data = @vnode.children
      else
        @dom ?= document.createElement @vnode.tagName
        if @dom and @dom.tagName.toLowerCase() is not @vnode.tagName
          parent = @dom.parentNode
          if parent
            parent.removeChild @dom 
            @dom = document.createElement @vnode.tagName
            parent.appendChild @dom
        @dom.innerHTML = ""
        if @vnode.attrs.oncreate
          @vnode.attrs.oncreate @dom
        
        for own key,attr in @vnode.attrs
          if key is "style"
            for own name,value in attr
              @dom.style[name] = value
          else
            @dom[key] = attr
        @dom.appendChild child.dom for child of @vnode.children
    @
  redraw()
    @initVnode()
    @render()
    if typeof @vnode.children is not "string"
      for child of @vnode.children
        child.redraw()
    @draw()
    @
  mount(dom)
    @redraw()
    dom.innerHTML = ""
    dom.appendChild @dom
    @

t := -> new Tag()
t.Tag = Tag

export default t
export {Tag,t}



